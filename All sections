<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Table with Multi-Select Search and Sorting</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }

        th {
            background-color: #f2f2f2;
            cursor: pointer;
        }

        .pagination {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
        }

        .pagination button {
            margin: 0 5px;
            padding: 5px 10px;
            border: 1px solid #ccc;
            background-color: #f2f2f2;
            cursor: pointer;
        }

        .pagination button:disabled {
            background-color: #ddd;
            cursor: not-allowed;
        }

        #searchInput {
            margin-bottom: 20px;
            padding: 10px;
            width: 100%;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .multi-select-container {
            position: relative;
            display: inline-block;
        }

        .multi-select {
            display: none;
            position: absolute;
            background: #fff;
            border: 1px solid #ccc;
            border-radius: 4px;
            max-height: 200px;
            overflow-y: auto;
            z-index: 1000;
            width: 200px;
            padding: 10px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        .multi-select input[type="checkbox"] {
            margin-right: 10px;
        }

        .multi-select input[type="text"] {
            margin-bottom: 10px;
            padding: 5px;
            width: calc(100% - 10px);
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .multi-select label {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
            cursor: pointer;
        }

        .multi-select-container button {
            padding: 5px 10px;
            border: 1px solid #ccc;
            background-color: #f2f2f2;
            cursor: pointer;
        }

        .multi-select-container button:focus {
            outline: none;
        }
    </style>
</head>
<body>
    <input type="text" id="searchInput" placeholder="Search in table...">

    <div class="multi-select-container">
        <button id="multiSelectButton">Select Filter Values</button>
        <div class="multi-select" id="dynamicFilterMultiSelect">
            <input type="text" id="multiSelectSearch" placeholder="Search options...">
            <!-- Options will be dynamically added here -->
        </div>
    </div>

    <table>
        <thead>
            <tr>
                <th onclick="sortTable(0)">Name</th>
                <th onclick="sortTable(1)">Country</th>
                <th onclick="sortTable(2)">MMSI</th>
                <th onclick="sortTable(3)">Ship Type</th>
                <th onclick="sortTable(4)">Flag</th>
            </tr>
        </thead>
        <tbody id="tableBody"></tbody>
    </table>

    <div class="pagination">
        <button onclick="prevPage()">Previous</button>
        <div class='info' id='infoId'></div>
        <button onclick="nextPage()">Next</button>
    </div>

    <script>
        function generateRandomShipData() {
            const countries = ['USA', 'UK', 'Germany', 'France', 'Japan', 'India', 'Canada', 'Italy', 'Australia', 'China'];
            const shipTypes = ['Cargo', 'Tanker', 'Cruise', 'Fishing', 'Patrol', 'Container', 'Research', 'Supply', 'Ferry', 'Luxury'];
            const shipData = [];

            for (let i = 1; i <= 100; i++) {
                const country = countries[Math.floor(Math.random() * countries.length)];
                shipData.push({
                    name: `Ship ${i}`,
                    country: country,
                    mmsi: `${Math.floor(100000000 + Math.random() * 900000000)}`,
                    shiptype: shipTypes[Math.floor(Math.random() * shipTypes.length)],
                    flag: country
                });
            }
            return shipData;
        }

        const shipData = generateRandomShipData();
        let currentPage = 1;
        let rowsPerPage = 5;
        let filteredData = shipData;
        let selectedValues = [];
        const sortDirections = Array(5).fill(true);

        function renderTable(data) {
            const tableBody = document.getElementById('tableBody');
            tableBody.innerHTML = '';
            const startIndex = (currentPage - 1) * rowsPerPage;
            const paginatedData = data.slice(startIndex, startIndex + rowsPerPage);

            paginatedData.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${item.name}</td>
                    <td>${item.country}</td>
                    <td>${item.mmsi}</td>
                    <td>${item.shiptype}</td>
                    <td>${item.flag}</td>
                `;
                tableBody.appendChild(row);
            });

            updatePaginationButtons(data);
        }

        function updatePaginationButtons(data) {
            const totalPages = Math.ceil(data.length / rowsPerPage);
            const infoid = document.getElementById('infoId');
            infoid.textContent = `${currentPage} / ${totalPages}`;
        }

        function nextPage() {
            if (currentPage < Math.ceil(filteredData.length / rowsPerPage)) {
                currentPage++;
                renderTable(filteredData);
            }
        }

        function prevPage() {
            if (currentPage > 1) {
                currentPage--;
                renderTable(filteredData);
            }
        }

        document.getElementById('multiSelectButton').addEventListener('click', function () {
            const multiSelect = document.getElementById('dynamicFilterMultiSelect');
            multiSelect.style.display = multiSelect.style.display === 'block' ? 'none' : 'block';
        });

        function updateMultiSelectOptions() {
            const multiSelect = document.getElementById('dynamicFilterMultiSelect');
            multiSelect.innerHTML = `
                <input type="text" id="multiSelectSearch" placeholder="Search options...">
                <label>
                    <input type="checkbox" id="selectAll"> All
                </label>
            `;
            const uniqueValues = [...new Set(shipData.map(item => item.name))];

            uniqueValues.forEach(value => {
                const label = document.createElement('label');
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.value = value;
                checkbox.addEventListener('change', handleMultiSelectChange);

                label.appendChild(checkbox);
                label.appendChild(document.createTextNode(value));
                multiSelect.appendChild(label);
            });

            document.getElementById('selectAll').addEventListener('change', function () {
                const checkboxes = multiSelect.querySelectorAll('input[type="checkbox"]');
                checkboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
                handleMultiSelectChange();
            });
        }

        function handleMultiSelectChange() {
            const checkboxes = document.querySelectorAll('#dynamicFilterMultiSelect input[type="checkbox"]');
            selectedValues = Array.from(checkboxes)
                .filter(checkbox => checkbox.checked && checkbox.value !== 'All')
                .map(checkbox => checkbox.value);

            applyFilters();
        }

        function applyFilters() {
            if (selectedValues.length === 0) {
                filteredData = shipData;
            } else {
                filteredData = shipData.filter(item =>
                    selectedValues.includes(item.name)
                );
            }
            currentPage = 1;
            renderTable(filteredData);
        }

        // Initial setup
        updateMultiSelectOptions();
        renderTable(filteredData);
    </script>
</body>
</html>
